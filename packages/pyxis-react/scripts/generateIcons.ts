import { readdirSync, readFileSync, writeFileSync } from 'fs';
import { join, resolve } from 'path';
import { kebabToPascalCase } from '../src/commons/utils/string';

const iconsPath = resolve(__dirname, '../../../', 'node_modules/@primauk/icons');
const svgNameList = readdirSync(iconsPath).filter((name) => name.endsWith('.svg'));

const svgElementsToRemove = [' xmlns:v="https://vecta.io/nano"'];

svgNameList.forEach((svgName) => {
  const svgPath = join(iconsPath, svgName);
  const svgContent = readFileSync(svgPath, 'utf8');

  const newContent = svgElementsToRemove
    .reduce(
      (content, elementToRemove) => content.replace(elementToRemove, ''),
      svgContent,
    );

  writeFileSync(svgPath, newContent, 'utf8');
});

const iconNameList = svgNameList
  .map((name) => name.replace('.svg', ''));

const initialImport = `// DO NOT EDIT. This file is autogenerated by scripts/generateIcons.ts
import React, { FC } from 'react';
import Icon, { IconProps } from 'components/Icon';`;

const importSvgAsComponents = iconNameList.map((name) => (
  `import { ReactComponent as ${kebabToPascalCase(name)} } from '@primauk/icons/${name}.svg';\n`))
  .join('');

const generateExportedIcons = iconNameList.map((name) => `export const Icon${kebabToPascalCase(name)}: FC<IconProps> = (props) => <Icon {...props}><${kebabToPascalCase(name)} /></Icon>;`)
  .join('\n');

const iconComponentPath = resolve(__dirname, '../', 'src/components/Icon');

writeFileSync(
  `${iconComponentPath}/Icons.tsx`,
  `${initialImport}
${importSvgAsComponents}
${generateExportedIcons}
`,
);
